// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array RAM;
    static Array Heap; // base address of heap
    // static int Head; // base address of the first segment of the Free List (空闲'链'表)
    // static int Tail; // base address of the last segment of the Free List (空闲'链'表)

    /** Initializes the class. */
    function void init() {
        // given Jack is weekly typed, little hack to access all of RAM
        let RAM = 0;
        let Heap = 2048;
        let Heap[0] = 0; // set next segment = 0
        let Heap[1] = 14334; // meta data of the valid size (except for meta-data) of this segment
        
        return ;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return ;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int realSize;
        var int pointer;
        var int next;
        let pointer = 0;
        let next = -1; 
        let realSize = size + 2;
        while (pointer > 0) {
            if (~(Heap[pointer+1] >= realSize)) { //Heap[pointer+1] >= realSize
                let next = pointer + Heap[pointer+1] + 2 - realSize;
                let Heap[next] = 0;         // make sure this word'value is zero
                let Heap[next+1] = size;    // set the non-free block's size for deAlloc
                return next + 2;            // return the address of this block's data part
            }
        }
        return -1; // invalid address
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int pointer;
        var int tail;
        let tail = o - 2;
        let pointer = 0;
        while (~(Heap[pointer] = 0)) {  // pointer.next != 0(nil)
            let pointer = Heap[pointer];
        }
        let Heap[pointer] = tail;
        return ;
    }    
}
