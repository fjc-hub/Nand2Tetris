function Utils.isPureBlack 5
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push constant 0
pop local 2
push constant 1
pop local 3
push constant 0
pop local 4
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop argument 0
label WHILE_EXP0
push local 4
push constant 16
lt
not
if-goto WHILE_END0
push local 4
push argument 0
gt
push local 4
push argument 0
push argument 2
add
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push local 3
add
pop local 2
label IF_FALSE0
push local 4
push argument 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push local 3
add
pop local 2
label IF_FALSE1
push local 3
push constant 2
call Math.multiply 2
pop local 3
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
label WHILE_EXP1
push argument 2
push constant 0
gt
not
if-goto WHILE_END1
push constant 16384
push local 0
add
call Memory.peek 1
pop local 1
push local 2
push local 1
and
push local 2
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
push argument 2
push constant 1
sub
pop argument 2
push local 0
push constant 32
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
not
return
function Utils.drawWall 1
push constant 4
pop local 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push constant 511
push constant 0
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 1
push constant 511
push constant 1
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 2
push constant 511
push constant 2
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 3
push constant 511
push constant 3
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 252
push constant 511
push constant 252
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 253
push constant 511
push constant 253
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 254
push constant 511
push constant 254
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 255
push constant 511
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 0
push constant 0
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 1
push constant 0
push constant 1
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 2
push constant 0
push constant 2
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 3
push constant 0
push constant 3
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 508
push constant 0
push constant 508
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 509
push constant 0
push constant 509
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 510
push constant 0
push constant 510
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 511
push constant 0
push constant 511
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Utils.modular 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Utils.nextFood 1
push argument 0
push constant 4
call Math.divide 2
pop argument 0
push argument 1
push constant 4
call Math.divide 2
pop argument 1
push argument 0
push constant 28
add
pop argument 0
push argument 1
push constant 14
add
pop argument 1
push argument 0
push constant 128
call Utils.modular 2
pop argument 0
push argument 0
push constant 0
eq
push argument 0
or
push constant 127
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 63
pop argument 0
label IF_FALSE0
push argument 1
push constant 64
call Utils.modular 2
pop argument 1
push argument 1
push constant 0
eq
push argument 1
or
push constant 63
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 31
pop argument 1
label IF_FALSE1
push argument 0
push constant 4
call Math.multiply 2
push argument 1
push constant 4
call Math.multiply 2
call Food.new 2
pop local 0
push local 0
return
